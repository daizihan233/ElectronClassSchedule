let weekIndex = localStorage.getItem('weekIndex')
if (weekIndex === null) localStorage.setItem('weekIndex', '0')
weekIndex = Number(localStorage.getItem('weekIndex'))

let timeOffset = localStorage.getItem('timeOffset')
if (timeOffset === null) localStorage.setItem('timeOffset', '0')
timeOffset = Number(localStorage.getItem('timeOffset'))

let dayOffset = localStorage.getItem('dayOffset')
if (dayOffset === null) localStorage.setItem('dayOffset', '-1')
dayOffset = Number(localStorage.getItem('dayOffset'))

let setDayOffsetLastDay = localStorage.getItem('setDayOffsetLastDay')
if (setDayOffsetLastDay === null) localStorage.setItem('setDayOffsetLastDay', '-1')
setDayOffsetLastDay = Number(localStorage.getItem('setDayOffsetLastDay'))


function getCurrentEditedDate() {
    let d = new Date();
    d.setSeconds(d.getSeconds() + Number.parseInt(timeOffset))
    return d;
}

function getCurrentEditedDay(date) {
    if (Number.parseInt(dayOffset) === -1)
        return date.getDay();
    if (Number.parseInt(setDayOffsetLastDay) === new Date().getDay()) {
        return dayOffset;
    }
    localStorage.setItem('dayOffset', '-1')
    localStorage.setItem('setDayOffsetLastDay', '-1')
    dayOffset = -1
    setDayOffsetLastDay = -1
    return date.getDay();
}

function isBreakTime(startTime, endTime, currentTime) {
    // 这俩东西我也不知道原作者怎么想的，实现逻辑一模一样
    return isClassCurrent(startTime, endTime, currentTime)
}

// Generated by ChatGPT4
function getCurrentDaySchedule() {
    const date = getCurrentEditedDate();
    const dayOfWeek = getCurrentEditedDay(date); // 0 = Sunday, 1 = Monday, ...
    const weekNumber = weekIndex; // 当前周数
    const dailyClass = scheduleConfig.daily_class[dayOfWeek];
    if (!dailyClass) return [];
    return dailyClass.classList.map(subject => {
        if (Array.isArray(subject)) {
            return subject[weekNumber]; // 处理每周不同的课程
        }
        return subject;
    });
}

function isClassCurrent(startTime, endTime, currentTime) {
    const [startH, startM] = startTime.split(':').map(Number);
    const [endH, endM] = endTime.split(':').map(Number);
    const [currentH, currentM] = currentTime.split(':').map(Number);

    const startMinutes = startH * 60 + startM;
    const endMinutes = endH * 60 + endM;
    const currentMinutes = currentH * 60 + currentM;

    return currentMinutes >= startMinutes && currentMinutes <= endMinutes;
}

function getCurrentTime() {
    const now = getCurrentEditedDate();
    return [
        now.getHours().toString().padStart(2, '0'),
        now.getMinutes().toString().padStart(2, '0'),
        now.getSeconds().toString().padStart(2, '0')
    ].join(':');
}

function setCurrentHighlightExternal(currentHighlight, index, type, fullName, endTime, currentTime, isEnd = false) {
        currentHighlight.index = index;
        currentHighlight.type = type;
        currentHighlight.fullName = fullName;
        currentHighlight.countdown = calculateCountdown(endTime, currentTime);
        currentHighlight.countdownText = formatCountdown(currentHighlight.countdown);
        if (isEnd) currentHighlight.isEnd = true;
    }

function getScheduleData() {
    const currentSchedule = getCurrentDaySchedule();
    const currentTime = getCurrentTime();
    const dayOfWeek = getCurrentEditedDay(getCurrentEditedDate());
    const timetable = scheduleConfig.daily_class[dayOfWeek].timetable;
    const dayTimetable = scheduleConfig.timetable[timetable];
    const divider = scheduleConfig.divider[timetable];
    let scheduleArray = [];
    let currentHighlight = { index: null, type: null, fullName: null, countdown: null, countdownText: null };

    const timeRanges = Object.keys(dayTimetable);

    const findUpcoming = (breakIndex, breakRange) => {
        // 选择接下来最近的一节课作为 upcoming
        for (let i = breakIndex + 1; i < timeRanges.length; i++) {
            const nextTimeRange = timeRanges[i];
            const nextClassIndex = dayTimetable[nextTimeRange];
            if (typeof nextClassIndex === 'number') {
                const short = currentSchedule[nextClassIndex];
                const full = scheduleConfig.subject_name[short];
                // scheduleArray.length 指向下一节在列表中的位置
                setCurrentHighlightExternal(
                    currentHighlight,
                    scheduleArray.length,
                    'upcoming',
                    full,
                    breakRange.split('-')[1],
                    currentTime
                );
                return true;
            }
        }
        // 没有后续课程，标记为结束（放学）
        const dismissalLabel = (scheduleConfig['end_of_day_label']) || '放学';
        setCurrentHighlightExternal(
            currentHighlight,
            Math.max(0, currentSchedule.length - 1),
            'upcoming',
            dismissalLabel,
            breakRange.split('-')[1],
            currentTime,
            true
        );
        return false;
    }

    for (const [index, timeRange] of timeRanges.entries()) {
        const [startTime, endTime] = timeRange.split('-');
        const classIndex = dayTimetable[timeRange];

        if (typeof classIndex === 'number') {
            const subjectShortName = currentSchedule[classIndex];
            const subjectFullName = scheduleConfig.subject_name[subjectShortName];
            scheduleArray.push(subjectShortName);

            if (isClassCurrent(startTime, endTime, currentTime)) {
                setCurrentHighlightExternal(currentHighlight, scheduleArray.length - 1, 'current', subjectFullName, endTime, currentTime);
            }
        } else if (currentHighlight.index === null && isBreakTime(startTime, endTime, currentTime)) {
            // 课间：寻找下一节课
            findUpcoming(index, timeRange);
        } else if (currentHighlight.index === null && !dayTimetable[timeRange]) {
            currentHighlight.fullName = currentSchedule[classIndex];
        }
    }

    return { scheduleArray, currentHighlight, timetable, divider };
}


function calculateCountdown(targetTime, currentTime) {
    const [targetH, targetM] = targetTime.split(':').map(Number);
    const [currentH, currentM, currentS = '00'] = currentTime.split(':').map(Number);

    const targetTotalSeconds = targetH * 3600 + (targetM + 1) * 60;
    const currentTotalSeconds = currentH * 3600 + currentM * 60 + currentS;

    return targetTotalSeconds - currentTotalSeconds;
}

function formatCountdown(countdownSeconds) {
    const minutes = Math.floor(countdownSeconds / 60);
    const seconds = countdownSeconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}
